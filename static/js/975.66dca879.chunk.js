"use strict";(self.webpackChunk_3d_examples=self.webpackChunk_3d_examples||[]).push([[975],{1975:function(t,e,r){r.r(e);var a=r(3562),o=r(2518),i=r(1935),n=r(5346),l=r(6938);e.default=function(){var t,e,r,s,u=1.5,d=0,m=0;!function(){t=new a.xsS,(e=new a.cPb(70,window.innerWidth/window.innerHeight,1,1e5)).position.set(50,50,50),e.position.y=50,(r=new a.CP7({antialias:!0})).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(r.domElement);var i=new a.Mig(16777215,.6);i.layers.enable(0),i.layers.enable(1),t.add(i),new o.z(e,r.domElement).update(),t.add(new a.y8_(100)),window.onresize=function(){r.setSize(window.innerWidth,window.innerHeight),e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix()}}(),function(){s=new i.xC(r);var o=new l.C(t,e),h=new n.m(new a.FM8(window.innerWidth,window.innerHeight),1.5,.4,.85);h.threshold=d,h.strength=u,h.radius=m,s.addPass(o),s.addPass(h)}(),function(){var e=new a.DvJ(20,20,10),r=new a.YBo({color:16776192}),o=new a.Kj0(e,r);o.position.z=-5,o.layers.set(0),t.add(o);var i=new a.YBo({color:245820}),n=new a.Kj0(e,i);n.position.z=5,n.layers.set(1),t.add(n)}(),function a(){r.autoClear=!1,r.clear(),e.layers.set(1),s.render(),r.clearDepth(),e.layers.set(0),r.render(t,e),requestAnimationFrame(a)}()}},5346:function(t,e,r){r.d(e,{m:function(){return m}});var a=r(5671),o=r(3144),i=r(136),n=r(9388),l=r(3562),s=r(6531),u=r(3500),d=r(5349),m=function(t){(0,i.Z)(r,t);var e=(0,n.Z)(r);function r(t,o,i,n){var m;(0,a.Z)(this,r),(m=e.call(this)).strength=void 0!==o?o:1,m.radius=i,m.threshold=n,m.resolution=void 0!==t?new l.FM8(t.x,t.y):new l.FM8(256,256),m.clearColor=new l.Ilk(0,0,0);var h={minFilter:l.wem,magFilter:l.wem,format:l.wk1};m.renderTargetsHorizontal=[],m.renderTargetsVertical=[],m.nMips=5;var v=Math.round(m.resolution.x/2),f=Math.round(m.resolution.y/2);m.renderTargetBright=new l.dd2(v,f,h),m.renderTargetBright.texture.name="UnrealBloomPass.bright",m.renderTargetBright.texture.generateMipmaps=!1;for(var c=0;c<m.nMips;c++){var g=new l.dd2(v,f,h);g.texture.name="UnrealBloomPass.h"+c,g.texture.generateMipmaps=!1,m.renderTargetsHorizontal.push(g);var p=new l.dd2(v,f,h);p.texture.name="UnrealBloomPass.v"+c,p.texture.generateMipmaps=!1,m.renderTargetsVertical.push(p),v=Math.round(v/2),f=Math.round(f/2)}void 0===d.Y&&console.error("THREE.UnrealBloomPass relies on LuminosityHighPassShader");var x=d.Y;m.highPassUniforms=l.rDY.clone(x.uniforms),m.highPassUniforms.luminosityThreshold.value=n,m.highPassUniforms.smoothWidth.value=.01,m.materialHighPassFilter=new l.jyz({uniforms:m.highPassUniforms,vertexShader:x.vertexShader,fragmentShader:x.fragmentShader,defines:{}}),m.separableBlurMaterials=[];var T=[3,5,7,9,11];v=Math.round(m.resolution.x/2),f=Math.round(m.resolution.y/2);for(var w=0;w<m.nMips;w++)m.separableBlurMaterials.push(m.getSeperableBlurMaterial(T[w])),m.separableBlurMaterials[w].uniforms.texSize.value=new l.FM8(v,f),v=Math.round(v/2),f=Math.round(f/2);m.compositeMaterial=m.getCompositeMaterial(m.nMips),m.compositeMaterial.uniforms.blurTexture1.value=m.renderTargetsVertical[0].texture,m.compositeMaterial.uniforms.blurTexture2.value=m.renderTargetsVertical[1].texture,m.compositeMaterial.uniforms.blurTexture3.value=m.renderTargetsVertical[2].texture,m.compositeMaterial.uniforms.blurTexture4.value=m.renderTargetsVertical[3].texture,m.compositeMaterial.uniforms.blurTexture5.value=m.renderTargetsVertical[4].texture,m.compositeMaterial.uniforms.bloomStrength.value=o,m.compositeMaterial.uniforms.bloomRadius.value=.1,m.compositeMaterial.needsUpdate=!0;m.compositeMaterial.uniforms.bloomFactors.value=[1,.8,.6,.4,.2],m.bloomTintColors=[new l.Pa4(1,1,1),new l.Pa4(1,1,1),new l.Pa4(1,1,1),new l.Pa4(1,1,1),new l.Pa4(1,1,1)],m.compositeMaterial.uniforms.bloomTintColors.value=m.bloomTintColors,void 0===u.C&&console.error("THREE.UnrealBloomPass relies on CopyShader");var b=u.C;return m.copyUniforms=l.rDY.clone(b.uniforms),m.copyUniforms.opacity.value=1,m.materialCopy=new l.jyz({uniforms:m.copyUniforms,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader,blending:l.WMw,depthTest:!1,depthWrite:!1,transparent:!0}),m.enabled=!0,m.needsSwap=!1,m._oldClearColor=new l.Ilk,m.oldClearAlpha=1,m.basic=new l.vBJ,m.fsQuad=new s.T(null),m}return(0,o.Z)(r,[{key:"dispose",value:function(){for(var t=0;t<this.renderTargetsHorizontal.length;t++)this.renderTargetsHorizontal[t].dispose();for(var e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose()}},{key:"setSize",value:function(t,e){var r=Math.round(t/2),a=Math.round(e/2);this.renderTargetBright.setSize(r,a);for(var o=0;o<this.nMips;o++)this.renderTargetsHorizontal[o].setSize(r,a),this.renderTargetsVertical[o].setSize(r,a),this.separableBlurMaterials[o].uniforms.texSize.value=new l.FM8(r,a),r=Math.round(r/2),a=Math.round(a/2)}},{key:"render",value:function(t,e,a,o,i){t.getClearColor(this._oldClearColor),this.oldClearAlpha=t.getClearAlpha();var n=t.autoClear;t.autoClear=!1,t.setClearColor(this.clearColor,0),i&&t.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=a.texture,t.setRenderTarget(null),t.clear(),this.fsQuad.render(t)),this.highPassUniforms.tDiffuse.value=a.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,t.setRenderTarget(this.renderTargetBright),t.clear(),this.fsQuad.render(t);for(var l=this.renderTargetBright,s=0;s<this.nMips;s++)this.fsQuad.material=this.separableBlurMaterials[s],this.separableBlurMaterials[s].uniforms.colorTexture.value=l.texture,this.separableBlurMaterials[s].uniforms.direction.value=r.BlurDirectionX,t.setRenderTarget(this.renderTargetsHorizontal[s]),t.clear(),this.fsQuad.render(t),this.separableBlurMaterials[s].uniforms.colorTexture.value=this.renderTargetsHorizontal[s].texture,this.separableBlurMaterials[s].uniforms.direction.value=r.BlurDirectionY,t.setRenderTarget(this.renderTargetsVertical[s]),t.clear(),this.fsQuad.render(t),l=this.renderTargetsVertical[s];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,t.setRenderTarget(this.renderTargetsHorizontal[0]),t.clear(),this.fsQuad.render(t),this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,i&&t.state.buffers.stencil.setTest(!0),this.renderToScreen?(t.setRenderTarget(null),this.fsQuad.render(t)):(t.setRenderTarget(a),this.fsQuad.render(t)),t.setClearColor(this._oldClearColor,this.oldClearAlpha),t.autoClear=n}},{key:"getSeperableBlurMaterial",value:function(t){return new l.jyz({defines:{KERNEL_RADIUS:t,SIGMA:t},uniforms:{colorTexture:{value:null},texSize:{value:new l.FM8(.5,.5)},direction:{value:new l.FM8(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})}},{key:"getCompositeMaterial",value:function(t){return new l.jyz({defines:{NUM_MIPS:t},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform sampler2D dirtTexture;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}"})}}]),r}(s.w);m.BlurDirectionX=new l.FM8(1,0),m.BlurDirectionY=new l.FM8(0,1)}}]);